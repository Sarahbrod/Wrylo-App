# Generated by Django 5.2.4 on 2025-07-14 00:32

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BookMood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BookTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('author', models.CharField(max_length=255)),
                ('isbn', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('genre', models.CharField(max_length=100)),
                ('published_year', models.IntegerField()),
                ('page_count', models.IntegerField(blank=True, null=True)),
                ('cover_image_url', models.URLField(blank=True, null=True)),
                ('google_books_id', models.CharField(blank=True, max_length=100, null=True)),
                ('openlibrary_id', models.CharField(blank=True, max_length=100, null=True)),
                ('average_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('rating_count', models.IntegerField(default=0)),
                ('popularity_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-popularity_score', '-average_rating'],
                'indexes': [models.Index(fields=['title'], name='books_book_title_d3218d_idx'), models.Index(fields=['author'], name='books_book_author_b941fe_idx'), models.Index(fields=['genre'], name='books_book_genre_4a7cdf_idx'), models.Index(fields=['isbn'], name='books_book_isbn_54becd_idx'), models.Index(fields=['google_books_id'], name='books_book_google__da53e2_idx')],
            },
        ),
        migrations.CreateModel(
            name='BookMoodAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_associations', to='books.book')),
                ('mood', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.bookmood')),
            ],
            options={
                'unique_together': {('book', 'mood')},
            },
        ),
        migrations.CreateModel(
            name='BookTagAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_associations', to='books.book')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.booktag')),
            ],
            options={
                'unique_together': {('book', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='UserLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('want_to_read', 'Want to Read'), ('reading', 'Currently Reading'), ('completed', 'Completed'), ('paused', 'Paused'), ('abandoned', 'Abandoned')], default='want_to_read', max_length=20)),
                ('user_rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_completed', models.DateTimeField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_books', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_added'],
                'unique_together': {('user', 'book')},
            },
        ),
    ]
