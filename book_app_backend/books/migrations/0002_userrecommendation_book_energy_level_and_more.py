# Generated by Django 5.2.4 on 2025-10-25 01:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mood_energy', models.CharField(max_length=10)),
                ('mood_genre', models.CharField(max_length=50)),
                ('mood_depth', models.CharField(max_length=10)),
                ('match_score', models.FloatField(default=0.0)),
                ('match_percentage', models.IntegerField(default=0)),
                ('match_reasons', models.JSONField(blank=True, default=list)),
                ('dismissed', models.BooleanField(default=False)),
                ('saved', models.BooleanField(default=False)),
                ('viewed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at', '-match_score'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='energy_level',
            field=models.CharField(blank=True, choices=[('high', 'High Energy'), ('medium', 'Medium Energy'), ('low', 'Low Energy')], help_text='Energy level/pace of the book', max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='book',
            name='reading_depth',
            field=models.CharField(blank=True, choices=[('light', 'Light Read'), ('medium', 'Medium Depth'), ('deep', 'Deep Dive')], help_text='Complexity and depth of the book', max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='book',
            name='reading_pace',
            field=models.CharField(blank=True, choices=[('fast', 'Fast-Paced'), ('moderate', 'Moderate Pace'), ('slow', 'Slow-Paced')], help_text='Overall pacing of the narrative', max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='book',
            name='theme_tags',
            field=models.TextField(blank=True, help_text="Comma-separated theme tags (e.g., 'adventure, romance, coming-of-age')"),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['energy_level'], name='books_book_energy__9bd2c4_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['reading_depth'], name='books_book_reading_e13ab9_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['reading_pace'], name='books_book_reading_88b0ed_idx'),
        ),
        migrations.AddField(
            model_name='userrecommendation',
            name='book',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book'),
        ),
        migrations.AddField(
            model_name='userrecommendation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['user', 'mood_energy', 'mood_genre', 'mood_depth'], name='books_userr_user_id_68706f_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['user', 'dismissed'], name='books_userr_user_id_37a74f_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['user', 'saved'], name='books_userr_user_id_753069_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrecommendation',
            unique_together={('user', 'book', 'mood_energy', 'mood_genre', 'mood_depth')},
        ),
    ]
